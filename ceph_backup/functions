#!/bin/bash

DEBUG=true
CREATE_BASE=false

function show_usage {
    echo "Usage:"
    echo "  $0 command"
    echo
    echo "Available commands: (Note: work in progress)"
    echo "help: show this message"
    echo "Options:"
    echo "  --debug    : to show some debug messages (by default)"
    echo "Commands  :"
    echo "  backup : to backup ceph data"
    echo "  restore: to restore backupped ceph data"
    echo "  list   : list all objects in rbd (developemnent option)"
    echo "  purge  : to remove all snapshots of all images (development option)"
    echo
    echo "Examples:"
    echo "  $0 backup"
    echo "  $0 restore --folder /backup/$SUFFIX"

}

function parse_options {
    opts="$@"
    for opt in $@; do
      case $opt in
        -d|--debug)   DEBUG=true
                      shift
                      ;;
        --folder)     shift 2
                      SOURCE=$1
                      ;;
        --nodebug)    DEBUG=false
                      shift
                      ;;
        --)           shift
                      nonopts+=("$@")
                      return
                      ;;
        help|backup|purge|list)
                      nonopts+=("$@")
                      return
                      ;;
        -*)           ${YELLOW}
                      echo "Unrecognized option: $opt" 1>&2
                      ${RESET}
                      exit 1
                      ;;
        *)            nonopts+=("$opt")
                      ;;
      esac
    done
}


function backup {

  pid                                      ## Create lock-file
  list                                     ## Just information
  make_dir_if_not_exist                    ## Create Skeleton
  save_metadata                            ## Metadata, wiil use it to understand the image size
  remove_deleted
  create_snapshots $BASEMARKER $SUFFIX     ## Every day snapshot to make DIFF from base to it
  export_base_images                       ## Need to create if there is no Base images or other cases
  export_diff_from_base_to_now
  delete_old_copies $BASEMARKER            ## If snapshot count more than needed
}

function restore {

  pid
  check_the_path $SOURCE
  import_base  $SOURCE
  NEWSUFFIX=`echo $SOURCE | sed 's#/$##' | awk -F "/" '{print $NF}'`
  create_snapshots $BASEMARKER $NEWSUFFIX
  import_diffs $SOURCE

}


function pid {
  # Am I Running
  if [ -f "${LCK_FILE}" ]; then
    MYPID=`head -n 1 $LCK_FILE`
    while [ -n "`ps -p ${MYPID} | grep ${MYPID}`" ]
    do
      echo `basename $0` is already running [$MYPID]
      exit
    done
  fi
  echo $$ > $LCK_FILE
}

function import_base {

  for pool in ${POOLS[@]}; do
    declare -a img=(`ls $BASEDEST/$pool/*.img | sed 's#.img$##'`)
    for i in ${img[@]} ; do
      debug import --image-format 2 ${i}.img `echo $i | sed 's#'$BASEDEST'/##'`
      rbd import --image-format 2 ${i}.img `echo $i | sed 's#'$BASEDEST'/##'`
    done
  done

}

function import_diffs {

  path="$1"
  for pool in ${POOLS[@]}; do
    declare -a diffs=(`ls $1/$MARKER/$pool/*.diff | sed 's,//,/,g'| sed 's#.diff$##' | sed 's#'$1'/daily/##'`)
    for i in ${diffs[@]} ; do
      prepare_path=`echo $i | sed 's,//,/,g' | sed 's#'$path'##g' | sed 's#'$MARKER'/##g'`
      debug import-diff $1/${MARKER}/${i}.diff $prepare_path
      rbd import-diff $1/${MARKER}/${i}.diff $prepare_path
    done
  done



}

function check_the_path {

  debug $1
  rc=`echo "$1" | grep $BACKUP &> /dev/null; echo $?`
  if [ "$1" == "" ]; then 
    ${YELLOW}
    echo "Please provide --folder option"
    ${RESET}
    exit 1
  elif [[ ! -e "$1" ]]; then
    ${RED}
    echo "Check the path, there should be --folder /backup/$SUFFIX option"; 
    ${RESET}
    exit 1
  elif [[ "$rc" > "0" ]]; then
    ${RED}
    echo "Check the path, should be like $DEST"; 
    ${RESET}
    exit 1
  fi

}


function make_dir_if_not_exist {

  if [ -d $DEST ]; then
    debug Destination folder already exists
  else
    debug "creating folder $DEST"
    mkdir -p $DEST
    mkdir -p $BASEDEST
    for pool in ${POOLS[@]}; do
      debug creating ${DEST}/${pool}
      mkdir -p ${DEST}/${pool}
      debug creating ${BASEDEST}/${pool}
      mkdir -p ${BASEDEST}/${pool}
    done
  fi

}

function list {

  for pool in ${POOLS[@]}; do
    debug list of images for pool $pool
    rbd -p $pool ls

    images=$(rbd -p $pool ls 2>/dev/null)
    for image in $(echo $images); do
      debug list of snapshots for_image ${pool}/${image}
      rbd snap ls ${pool}/${image}
    done
  done
}

function purge {

  for pool in ${POOLS[@]}; do
    images=$(rbd -p $pool ls 2>/dev/null)
    for image in $(echo $images); do
      rbd snap ls ${pool}/${image}
      #for sn in `rbd snap ls ${pool}/${image} | grep -v SNAPID | awk '{print $2}'` ; do
      #    rbd snap unprotect $pool/$image@$sn &>/dev/null
      #done
      rbd snap purge ${pool}/${image}
    done
  done
}

function save_metadata {

  for pool in ${POOLS[@]}; do
    images=$(rbd -p $pool ls 2>/dev/null)
    debug Images: $images
    numimages=$(echo $images|sed '/^$/d'|wc -l)
    debug number of images $numimages
    if [ "$numimages" -eq 0 ]; then
        continue;
    fi
    echo $images > ${DEST}/${pool}/images
    rados -p $pool get rbd_directory ${DEST}/${pool}/rbd_directory

    for image in $(echo $images); do
        rbd -p $pool info $image > ${DEST}/${pool}/${image}.info
    done

  done

}

function remove_deleted {

declare -a removed_images

  for pool in ${POOLS[@]}; do
    if [ "$pool" == "compute" ]; then
      debug gathering fresh deleted images from OpenStack database NOVA
      debug `ssh $CONTR "mysql -N -s -r -e \"select uuid from instances where vm_state='deleted'\" nova"`
      debug `ssh $CONTR "mysql -N -s -r -e \"select uuid from s3_images where deleted='1'\" nova"`
      removed_images+=`ssh $CONTR "mysql -N -s -r -e \"select uuid from instances where vm_state='deleted'\" nova" | tr '\n' ' '`
      removed_images+=`ssh $CONTR "mysql -N -s -r -e \"select uuid from s3_images where deleted='1'\" nova" | tr '\n' ' '`

    elif [ "$pool" == "volumes" ]; then
      debug gathering fresh deleted images from OpenStack database CINDER
      debug `ssh $CONTR "mysql -N -s -r -e \"select id from volumes where status='deleted'\" cinder"`
      removed_images+=`ssh $CONTR "mysql -N -s -r -e \"select id from volumes where status='deleted'\" cinder" | tr '\n' ' '`
      
    elif [ "$pool" == "images" ]; then
      debug gathering fresh deleted images from OpenStack database GLANCE
      debug `ssh $CONTR "mysql -N -s -r -e \"select id from images where status='deleted'\" glance"`
      removed_images+=`ssh $CONTR "mysql -N -s -r -e \"select id from images where status='deleted'\" glance" | tr '\n' ' '`

    else
      debug it seems that we use non openstack environment
    fi
  done

  debug images that marked as removed in mysql: "${removed_images[@]}"

  for img_name in ${removed_images[@]}; do
    #delete base_snap_from_disk
    count_of_diffs=`find $BACKUP -name *${img_name}*.diff | wc -l`
    echo $conut_of_diffs
    if [ "$count_of_diffs" -eq 0 ] ; then
      find $BASEDEST -type f -name "*${img_name}*.img" -exec rm -f {} \;
    fi

      for pool in ${POOLS[@]}; do
        images=$(rbd -p $pool ls 2>/dev/null)
        for image in $(echo $images); do
          if [[ "$image" =~ "$img_name" ]] ; then
            #if snapshot is protected, so better to unprotect it before deletion
            #for sn in `rbd snap ls ${pool}/${image} | grep -v SNAPID | awk '{print $2}'` ; do
            #  rbd snap unprotect $pool/$image@$sn &>/dev/null
            #done
            debug We have found, that image $img_name web deleted from OpenStack, so we have to delete snapshots and image from ceph
            debug snap purge ${pool}/${image}
            rbd snap purge ${pool}/${image}
            debug rm ${pool}/${image}
            rbd rm ${pool}/${image}
          fi
        done
      done
 done

}

function create_snapshots {

  for pool in ${POOLS[@]}; do
    images=$(rbd -p $pool ls 2>/dev/null)
    for image in $(echo $images); do
      base_images_count=`rbd snap ls $pool/$image | grep -v "SNAPID" | grep $BASEMARKER | sort -n | head -n 1 | awk '{print $2}' | wc -l`
      if [ "$base_images_count" -eq "0" ] ; then
        debug creating $1 snapshot for: $pool/$image with name $1.${image}.snap.$2
        rbd -p $pool snap create --snap $1.${image}.snap.$2 ${image}
      fi

    done
  done

}

function delete_old_copies {

  to_del="0"
  folder_count=`ls $BACKUP | grep -v $1 | sort -n | wc -l`
  if [ $folder_count -gt $COPIES ]; then
    (( to_del = (( $folder_count - $COPIES)) ))
    declare -a old_folders=(`ls $BACKUP | grep -v $1 | sort -r | tail -n $to_del`)
    for i in ${old_folders[@]} ; do
      debug deleting old data from  $BACKUP/$i
      rm -rf $BACKUP/$i
    done
  fi
}

function export_base_images {

  for pool in ${POOLS[@]}; do
    images=$(rbd -p $pool ls 2>/dev/null)
    for image in $(echo $images); do
      if [ ! -e "$BASEDEST/$pool/${image}.img" ] ; then 
        debug exporting BASE image $pool/$image $BASEDEST/$pool/$image.img
        rbd export $pool/$image $BASEDEST/$pool/${image}.img >/dev/null 2>&1
      fi 
    done
  done

}

function export_diff_from_base_to_now {
  for pool in ${POOLS[@]}; do
    images=$(rbd -p $pool ls 2>/dev/null)
    for image in $(echo $images); do
      latest_base=`rbd snap ls $pool/$image | grep -v "SNAPID" | grep $BASEMARKER | sort -n | head -n 1 |awk '{print $2}'`
      if [ ! -e "$DEST/$pool/${image}.diff" ] ; then 
        debug export-diff $pool/$image --from-snap $latest_base $DEST/$pool/$image.diff
        rbd export-diff $pool/$image --from-snap $latest_base $DEST/$pool/${image}.diff >/dev/null 2>&1
      fi
    done
  done

}


function retry_checker {

    tries=0
    echo "checking with command \"$*\""
    until eval $*; do
      rc=$?
      ((tries++))
      echo "try number $tries"
      echo "return code is $rc"
      if [ $tries -gt $CHECK_RETRIES ]; then
      failure=1
      break
    fi
      sleep 1
    done

}


function check_ready {

    #Uses a custom command to ensure a container is ready
    update_credentials
    failure=0
    echo "checking that node or service is available: $1 $2"
    case $1 in
      node) retry_checker "fuel node | grep '$2' | grep 'True'" ;;
      *) echo "No defined test for determining if $1 is ready.";;
    esac

    if [ $failure -eq 1 ]; then
      echo "ERROR: $1 failed to start."
      return 1
    else
      echo "$1 is ready."
      return 0
    fi

}

function update_credentials {

    credentialfile=$(mktemp /tmp/servicepws.XXXXX)
    $GSC $ASTUTE_YAML > $credentialfile
    . $credentialfile
    rm -f $credentialfile

}

function debug {

  if $DEBUG; then
    ${YELLOW}
    echo $@
    ${RESET}
  fi

}
