#!/bin/bash

DEBUG=true

function show_usage {
    echo "Usage:"
    echo "  $0 command"
    echo
    echo "Available commands: (Note: work in progress)"
    echo "help: show this message"
    echo "Options:"
    ${GREEN}
    echo "  --debug    : to show some debug messages"
    ${RESET}
    echo "Commands  :"
    echo "  boot: to boot up node"
    echo
    echo "Examples:"

}

function parse_options {
    opts="$@"
    for opt in $@; do
      case $opt in
        -d|--debug)   DEBUG=true
                      shift
                      ;;
        --nodebug)    DEBUG=false
                      shift
                      ;;
        --)           shift
                      nonopts+=("$@")
                      return
                      ;;
        help|boot|deploy|start|stop|remove)
                      nonopts+=("$@")
                      return
                      ;;
        -*)           ${YELLOW}
                      echo "Unrecognized option: $opt" 1>&2
                      ${RESET}
                      exit 1
                      ;;
        *)            nonopts+=("$opt")
                      ;;
      esac
    done
}

function backup {

list 

  make_dir_if_not_exist
  create_index_if_not_exist
  save_metadata
  create_snapshot
  export_snapshot
  update_index

}

function make_dir_if_not_exist {

  if [ -d $DEST ]; then
    debug Destination folder already exists
  else
    debug "creating folder $DEST"
    for pool in ${POOLS[@]}; do
      debug creating $DEST/$pool
      mkdir -p $DEST/$pool
    done
  fi
}

function list {

  for pool in ${POOLS[@]}; do
    images=$(rbd -p $pool ls 2>/dev/null)
    for image in $(echo $images); do

      rbd snap ls ${pool}/${image}

    done
  done
}

function purge {

  for pool in ${POOLS[@]}; do
    images=$(rbd -p $pool ls 2>/dev/null)
    for image in $(echo $images); do

      rbd snap ls ${pool}/${image}
      rbd snap purge ${pool}/${image}

    done
  done


}


function create_index_if_not_exist {

  debug "checking index file"
  if [ -e $INDEX ]; then
    debug $INDEX already exists
  else
     echo "#index file do not remove" > $INDEX
  fi
}

function save_metadata {

  for pool in ${POOLS[@]}; do
    images=$(rbd -p $pool ls 2>/dev/null)
    debug Images: $images
    numimages=$(echo $images|sed '/^$/d'|wc -l)
    debug number of images $numimages
    if [ "$numimages" -eq 0 ]; then
        continue;
    fi
    echo $images > $DEST/$pool/images
    rados -p $pool get rbd_directory $DEST/$pool/rbd_directory

    for image in $(echo $images); do
        rbd -p $pool info $image > $DEST/$pool/$image.rbd
    done

  done

}

function create_snapshot {

 for pool in ${POOLS[@]}; do
    images=$(rbd -p $pool ls 2>/dev/null)
    for image in $(echo $images); do
      debug creating snapshot for: $pool/$image with name ${image}-${SUFFIX}
      rbd -p $pool snap create --snap ${image}-${SUFFIX} ${image}
    done
  done

}


function export_snapshot {


  for pool in ${POOLS[@]}; do
    images=$(rbd -p $pool ls 2>/dev/null)
    for image in $(echo $images); do
  
      latest_snap=`rbd snap ls $pool/$image | grep -v "SNAPID" | sort -r | head -n 1 |awk '{print $2}'`
      if [[ -z "$latest_snap" ]]; then
        debug info: no snap for $pool/$image to backup
        continue
      fi

      image_dir="${DEST}/${image}"

      if [[ ! -e "$image_dir" ]]; then
        mkdir -p "$image_dir"
        # full export the image
        debug rbd export $pool/$image $image_dir
        rbd export $pool/$image $image_dir >/dev/null 2>&1
   
        # export-diff the first snapshot
        debug rbd export-diff $pool/$image@$latest_snap ${image_dir}_${latest_snap}
        rbd export-diff $pool/$image@$latest_snap ${image_dir}_${latest_snap} >/dev/null 2>&1
        continue
      fi

        # export-diff the snapshot from last one
        last_snap=`ls $image_dir -1 -rt | tail -n 1 | awk -F_ '{print $2}'`
        if [[ $latest_snap == $last_snap ]]; then
          continue
        fi
        debug rbd export-diff --from-snap $last_snap $pool/$image@$latest_snap $image_dir/${last_snap}_${latest_snap}
        rbd export-diff --from-snap $last_snap $pool/$image@$latest_snap $image_dir/${last_snap}_${latest_snap}  >/dev/null 2>&1

    done
  done
}

function update_index {

  LAST_UPDATE=`tail -2 $INDEX | head -1`
  echo $SUFFIX >> $INDEX

}


function retry_checker {

    tries=0
    echo "checking with command \"$*\""
    until eval $*; do
      rc=$?
      ((tries++))
      echo "try number $tries"
      echo "return code is $rc"
      if [ $tries -gt $CHECK_RETRIES ]; then
      failure=1
      break
    fi
      sleep 1
    done

}


function check_ready {

    #Uses a custom command to ensure a container is ready
    update_credentials
    failure=0
    echo "checking that node or service is available: $1 $2"
    case $1 in
      node) retry_checker "fuel node | grep '$2' | grep 'True'" ;;
      *) echo "No defined test for determining if $1 is ready.";;
    esac

    if [ $failure -eq 1 ]; then
      echo "ERROR: $1 failed to start."
      return 1
    else
      echo "$1 is ready."
      return 0
    fi

}

function update_credentials {

    credentialfile=$(mktemp /tmp/servicepws.XXXXX)
    $GSC $ASTUTE_YAML > $credentialfile
    . $credentialfile
    rm -f $credentialfile

}

function debug {

  if $DEBUG; then
    ${YELLOW}
    echo $@
    ${RESET}
  fi

}
